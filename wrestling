from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from functools import partial
from kivy.config import Config
from kivy.clock import Clock
from kivy.uix.label import Label
from kivy.uix.floatlayout import FloatLayout
# Projeto de wrestling mobile para aplicação em treinos e de simples uso

#cores 
cor1 = "#0a0a0a"  # black / preta
cor2 = "#fafcff"  # white / branca
cor3 = "#21c25c"  # green / verde
cor4 = "#eb463b"  # red / vermelha
cor5 = "#dedcdc"  # gray / Cizenta
cor6 = "#3080f0"  # blue / azul

#janela

Config.set('graphics','width','400')
Config.set('graphics','height','600')

#cronometro
class Cronometro(Label):
    def __init__(self, **kwargs):
        super(Cronometro, self).__init__(**kwargs)
        self.text= '00:00:00'
        self.font_size=75
        self.pos=(1,300)
        self.tempo = 0

    def atualizar_tempo(self, dt):
        self.tempo += dt 
        minutos = int(self.tempo / 60)
        segundos = int(self.tempo % 60)
        milisegundos = int((self.tempo - int(self.tempo)) * 1000)
        self.text = f"{minutos:02d}:{segundos:02d}:{milisegundos:03d}"
#layout principal
class WrestlingApp(App):
    def build(self):

        #principal
        layout = FloatLayout()
        

        #cronometro na tela
        self.cronometro = Cronometro()
        layout.add_widget(self.cronometro)
        botoes_cronometro_layout = BoxLayout(orientation='horizontal', pos=(100,500))

        #mostrar pontuaçao vermelho
        self.ladovermelho = Label(text='0', font_size=50, pos=(-190,75))
        layout.add_widget(self.ladovermelho)
        #mostrar pontuacao azul
        self.ladoazul = Label(text='0', font_size=50, pos=(190,75))
        layout.add_widget(self.ladoazul)

        crn_buttons = ['iniciar', 'Pausar', 'Reiniciar']
        for texto in crn_buttons:
            botao_cronometro = Button (text=texto, size_hint=(None, None), size=(100, 100))
            botao_cronometro.bind(on_press=partial(self.controlar_cronometro, texto.lower()))
            botoes_cronometro_layout.add_widget(botao_cronometro)
    
        layout.add_widget(botoes_cronometro_layout)

        #pontuacao vermelho
        botoes_pontuacao_R_layout = BoxLayout(orientation='vertical', pos=(10,10))
        for i in range (3):

            valor_pontuacao_R = i + 1
            botao_pontuacao_R = Button (text=f'+{valor_pontuacao_R}', size_hint=(None, None), size=(100,100))
            botao_pontuacao_R.bind(on_press=partial(self.pontosR_callback,valor_pontuacao_R))
            botoes_pontuacao_R_layout.add_widget(botao_pontuacao_R)

        botao_reiniciar_pontuacao_R = Button(text='Reiniciar', size_hint=(None, None), size=(100,100))
        botao_reiniciar_pontuacao_R.bind(on_press=self.reiniciar_pontuacao_R)
        botoes_pontuacao_R_layout.add_widget(botao_reiniciar_pontuacao_R)

        layout.add_widget(botoes_pontuacao_R_layout)

        #pontuacao azul
        botoes_pontuacao_B_layout = BoxLayout(orientation='vertical', pos=(390,10))
        for i in range (3):

            valor_pontuacao_B = i + 1
            botao_pontuacao_B = Button (text=f'+{valor_pontuacao_B}', size_hint=(None, None), size=(100,100))
            botao_pontuacao_B.bind(on_press=partial(self.pontosB_callback,valor_pontuacao_B))
            botoes_pontuacao_B_layout.add_widget(botao_pontuacao_B)

        botao_reiniciar_pontuacao_B = Button(text='Reiniciar', size_hint=(None, None), size=(100,100))
        botao_reiniciar_pontuacao_B.bind(on_press=self.reiniciar_pontuacao_B)
        botoes_pontuacao_B_layout.add_widget(botao_reiniciar_pontuacao_B)

        layout.add_widget(botoes_pontuacao_B_layout)

        return layout
    



    #funçoes dos botoes

    #Cronometro
    def controlar_cronometro(self, acao, button_instance):

        if acao == 'iniciar':
            self.schedule = Clock.schedule_interval(self.cronometro.atualizar_tempo, 0.01)

        elif acao == 'pausar':
            self.schedule.cancel()

        elif acao == 'reiniciar':
            if hasattr (self, 'schedule'):
                self.schedule.cancel()
            self.cronometro.tempo = 0
            self.cronometro.text = '00:00:00'
            
    
        

    
   
    #pontos vermelho
    
    def pontosR_callback(self, valor, button_instace):
        nova_pontuacao_R = int(self.ladovermelho.text) + valor
        self.ladovermelho.text= str(nova_pontuacao_R)

    def reiniciar_pontuacao_R(self, button_instance):
        self.ladovermelho.text = '0'

    #pontos azul
    
    def pontosB_callback(self, valor, button_instace):
        nova_pontuacao_B = int(self.ladoazul.text) + valor
        self.ladoazul.text= str(nova_pontuacao_B)

    def reiniciar_pontuacao_B(self, button_instance):
        self.ladoazul.text = '0'

#executar
if __name__ == '__main__':
    WrestlingApp().run()
